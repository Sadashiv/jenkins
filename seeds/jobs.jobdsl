import groovy.json.JsonSlurper

def jsonSlurper = new JsonSlurper()

def config = jsonSlurper.parse(new File('config.json'))
def ipfolder = "IP_JOB"
def ipview = "IP_JOB"
//By using final keyword varaible declared can't be modified
final String LABEL_NAME = "master"

listView(ipfolder) {
description('All new jobs for testlist')
filterBuildQueue()
filterExecutors()
jobs {
    name('sada') 
    regex(/192.168/)

}
    columns {
    status()
    weather()
    name()
    lastSuccess()
    lastFailure()
    lastDuration()
    buildButton()
}
}

//Create folder function
def createFolder(folders){
    folder(folders) {}
    folder("${folders}/${folders}") {}
}


//This is logic for pipelinejpob
config.os.each {
    def folders = ipfolder
    println(folders)
    createFolder(folders)
    //Create job insdie the folder
    def jobName = "${ipfolder}/"+(it.ip)
    pipelineJob(jobName) {

    definition {
        cpsScm {
            scm {
                git{
                    branch('jenkins')
                        remote {
                            //id("github-id")
                            credentials("github-id")
                            url('https://github.com/Sadashiv/jenkins.git')
                        }
                }
            }
            scriptPath('Jenkinsfile')
            lightweight(true)
        }
        parameters {
            properties {
                disableConcurrentBuilds()
                customIcon('jobs_dashboard.png')
                sidebarLinks {
                    //Built in image
                    link('https://github.com/Sadashiv', 'GitHub', 'userContent/github.png')
                }
                rebuild {
                    rebuildDisabled(rebuildDisabled = true)
                }
            }

            stringParam("branch", 'master', "Welocme git branch")
            triggers {
                // Provides a cron -like feature to periodically execute this project.
                cron {
                spec("H 0,12 * * *")
                }
            }
            logRotator {
                daysToKeep(5)
                numToKeep(15)
            }
            booleanParam('RUN_TESTS', true, 'uncheck to disable tests')
            wHideParameterDefinition {
                name("HIDDEN_PARAM")
                defaultValue("HELLO")
                description("This is hidden parama")
            }
            choiceParam('itChoiceParama', ['choice1 (default)', 'choice 2', 'choice 3'], 'Choice param description')

    }
    }
  }
}


//This is configuration for freestylejob

config.os.each {
    def folders = ipfolder
    println(folders)
    def jobName = it.ip
    String nodeName = it.label_name ? it.label_name: LABEL_NAME
    println(nodeName)
    freeStyleJob(jobName) {
        label(nodeName)
        wrappers {
            colorizeOutput()
            timestamps()
            preBuildCleanup()
        }
        logRotator(-1, 10)
            scm {
                 git('https://github.com/Sadashiv/jenkins', 'jenkins')
        }
        parameters {
            properties {
                disableConcurrentBuilds()
                customIcon('jobs_dashboard.png')
                sidebarLinks {
                    //Built in image
                    link('https://github.com/Sadashiv', 'GitHub', 'userContent/github.png')
                }
                rebuild {
                    rebuildDisabled(rebuildDisabled = true)
                }
            }

            stringParam("branch", 'master', "Welocme git branch")
            choiceParam('itChoiceParama', ['choice1 (default)', 'choice 2', 'choice 3'], 'Choice param description')
            triggers {
                // Provides a cron -like feature to periodically execute this project.
                cron {
                    spec("H 0,12 * * *")
                }
            }
            logRotator {
                daysToKeep(5)
                numToKeep(15)
            }
            booleanParam('RUN_TESTS', true, 'uncheck to disable tests')
            wHideParameterDefinition {
                name("HIDDEN_PARAM")
                defaultValue("HELLO")
                description("This is hidden parama")
            }

            triggers {
                githubPush()
            }
            steps {
                shell('echo Hello World!')
            }
            /*steps {
                batch('echo Hello World!')
            }*/
            /*steps {
                gradle('clean build')
            }
            steps {
                maven('clean')
            }*/
            publishers {
                    extendedEmail {
                        recipientList('sadamsrit@gmail.com')
                        defaultSubject('DSL script through job email')
                        defaultContent('default')
                        contentType('text/html')
                        triggers {
                            beforeBuild()
                            stillUnstable {
                                subject('DSL script through job email')
                                content('Hello, Welcome to email')
                                sendTo {
                                    developers()
                                    requester()
                                    culprits()
                                }
                            }
                        }
                    }
                }




        }
    }
}



//NonCPS
/*@NonCPS
def myFunction() {
    throw new RuntimeException();
}

try {
    myFunction();
} catch (Exception e) {
    echo "Caught";
}


@NonCPS
def myFunction() {
    throw new RuntimeException();
}

def mySecondFunction() {
    try {
        myFunction();
    } catch (Exception e) {
        echo "Caught";
    }
}

mySecondFunction();
*/

/*
@NonCPS
def myFunction() {
    throw new RuntimeException();
}

@NonCPS
def mySecondFunction() {
    try {
        myFunction();
    } catch (Exception e) {
        echo "Caught";
    }
}

mySecondFunction();
*/
